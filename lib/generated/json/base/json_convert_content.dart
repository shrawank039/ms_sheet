// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:ms_sheet/models/agents_response_entity.dart';
import 'package:ms_sheet/models/counters_entity.dart';
import 'package:ms_sheet/models/local_players_entity.dart';
import 'package:ms_sheet/models/panel_response_entity.dart';
import 'package:ms_sheet/models/sheets_response_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
  static final Map<String, JsonConvertFunction> _convertFuncMap = {
    (AgentsResponseEntity).toString(): AgentsResponseEntity.fromJson,
    (AgentsResponseData).toString(): AgentsResponseData.fromJson,
    (CountersEntity).toString(): CountersEntity.fromJson,
    (CountersData).toString(): CountersData.fromJson,
    (LocalPlayersEntity).toString(): LocalPlayersEntity.fromJson,
    (LocalPlayersData).toString(): LocalPlayersData.fromJson,
    (PanelResponseEntity).toString(): PanelResponseEntity.fromJson,
    (PanelResponseData).toString(): PanelResponseData.fromJson,
    (SheetsResponseEntity).toString(): SheetsResponseEntity.fromJson,
    (SheetsResponseData).toString(): SheetsResponseData.fromJson,
  };

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AgentsResponseEntity>[] is M) {
      return data
          .map<AgentsResponseEntity>(
              (Map<String, dynamic> e) => AgentsResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<AgentsResponseData>[] is M) {
      return data
          .map<AgentsResponseData>(
              (Map<String, dynamic> e) => AgentsResponseData.fromJson(e))
          .toList() as M;
    }
    if (<CountersEntity>[] is M) {
      return data
          .map<CountersEntity>(
              (Map<String, dynamic> e) => CountersEntity.fromJson(e))
          .toList() as M;
    }
    if (<CountersData>[] is M) {
      return data
          .map<CountersData>(
              (Map<String, dynamic> e) => CountersData.fromJson(e))
          .toList() as M;
    }
    if (<LocalPlayersEntity>[] is M) {
      return data
          .map<LocalPlayersEntity>(
              (Map<String, dynamic> e) => LocalPlayersEntity.fromJson(e))
          .toList() as M;
    }
    if (<LocalPlayersData>[] is M) {
      return data
          .map<LocalPlayersData>(
              (Map<String, dynamic> e) => LocalPlayersData.fromJson(e))
          .toList() as M;
    }
    if (<PanelResponseEntity>[] is M) {
      return data
          .map<PanelResponseEntity>(
              (Map<String, dynamic> e) => PanelResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<PanelResponseData>[] is M) {
      return data
          .map<PanelResponseData>(
              (Map<String, dynamic> e) => PanelResponseData.fromJson(e))
          .toList() as M;
    }
    if (<SheetsResponseEntity>[] is M) {
      return data
          .map<SheetsResponseEntity>(
              (Map<String, dynamic> e) => SheetsResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<SheetsResponseData>[] is M) {
      return data
          .map<SheetsResponseData>(
              (Map<String, dynamic> e) => SheetsResponseData.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.asT<M>(json);
    }
  }
}
