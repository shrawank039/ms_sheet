// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:ms_sheet/models/agents_response_entity.dart';
import 'package:ms_sheet/models/counters_entity.dart';
import 'package:ms_sheet/models/local_players_entity.dart';
import 'package:ms_sheet/models/panel_response_entity.dart';
import 'package:ms_sheet/models/sheets_response_entity.dart';
import 'package:ms_sheet/models/wallet_add_transaction_entity.dart';
import 'package:ms_sheet/models/wallet_balance_entity.dart';
import 'package:ms_sheet/models/wallet_client_entity.dart';
import 'package:ms_sheet/models/wallet_transactions_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static final Map<String, JsonConvertFunction> convertFuncMap = {
    (AgentsResponseEntity).toString(): AgentsResponseEntity.fromJson,
    (AgentsResponseData).toString(): AgentsResponseData.fromJson,
    (CountersEntity).toString(): CountersEntity.fromJson,
    (CountersData).toString(): CountersData.fromJson,
    (LocalPlayersEntity).toString(): LocalPlayersEntity.fromJson,
    (LocalPlayersData).toString(): LocalPlayersData.fromJson,
    (PanelResponseEntity).toString(): PanelResponseEntity.fromJson,
    (PanelResponseData).toString(): PanelResponseData.fromJson,
    (SheetsResponseEntity).toString(): SheetsResponseEntity.fromJson,
    (SheetsResponseData).toString(): SheetsResponseData.fromJson,
    (WalletAddTransactionEntity).toString():
        WalletAddTransactionEntity.fromJson,
    (WalletAddTransactionData).toString(): WalletAddTransactionData.fromJson,
    (WalletBalanceEntity).toString(): WalletBalanceEntity.fromJson,
    (WalletBalanceData).toString(): WalletBalanceData.fromJson,
    (WalletClientEntity).toString(): WalletClientEntity.fromJson,
    (WalletClientData).toString(): WalletClientData.fromJson,
    (WalletTransactionsEntity).toString(): WalletTransactionsEntity.fromJson,
    (WalletTransactionsData).toString(): WalletTransactionsData.fromJson,
    (WalletTransactionsDataTransactions).toString():
        WalletTransactionsDataTransactions.fromJson,
  };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AgentsResponseEntity>[] is M) {
      return data
          .map<AgentsResponseEntity>(
              (Map<String, dynamic> e) => AgentsResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<AgentsResponseData>[] is M) {
      return data
          .map<AgentsResponseData>(
              (Map<String, dynamic> e) => AgentsResponseData.fromJson(e))
          .toList() as M;
    }
    if (<CountersEntity>[] is M) {
      return data
          .map<CountersEntity>(
              (Map<String, dynamic> e) => CountersEntity.fromJson(e))
          .toList() as M;
    }
    if (<CountersData>[] is M) {
      return data
          .map<CountersData>(
              (Map<String, dynamic> e) => CountersData.fromJson(e))
          .toList() as M;
    }
    if (<LocalPlayersEntity>[] is M) {
      return data
          .map<LocalPlayersEntity>(
              (Map<String, dynamic> e) => LocalPlayersEntity.fromJson(e))
          .toList() as M;
    }
    if (<LocalPlayersData>[] is M) {
      return data
          .map<LocalPlayersData>(
              (Map<String, dynamic> e) => LocalPlayersData.fromJson(e))
          .toList() as M;
    }
    if (<PanelResponseEntity>[] is M) {
      return data
          .map<PanelResponseEntity>(
              (Map<String, dynamic> e) => PanelResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<PanelResponseData>[] is M) {
      return data
          .map<PanelResponseData>(
              (Map<String, dynamic> e) => PanelResponseData.fromJson(e))
          .toList() as M;
    }
    if (<SheetsResponseEntity>[] is M) {
      return data
          .map<SheetsResponseEntity>(
              (Map<String, dynamic> e) => SheetsResponseEntity.fromJson(e))
          .toList() as M;
    }
    if (<SheetsResponseData>[] is M) {
      return data
          .map<SheetsResponseData>(
              (Map<String, dynamic> e) => SheetsResponseData.fromJson(e))
          .toList() as M;
    }
    if (<WalletAddTransactionEntity>[] is M) {
      return data
          .map<WalletAddTransactionEntity>((Map<String, dynamic> e) =>
              WalletAddTransactionEntity.fromJson(e))
          .toList() as M;
    }
    if (<WalletAddTransactionData>[] is M) {
      return data
          .map<WalletAddTransactionData>(
              (Map<String, dynamic> e) => WalletAddTransactionData.fromJson(e))
          .toList() as M;
    }
    if (<WalletBalanceEntity>[] is M) {
      return data
          .map<WalletBalanceEntity>(
              (Map<String, dynamic> e) => WalletBalanceEntity.fromJson(e))
          .toList() as M;
    }
    if (<WalletBalanceData>[] is M) {
      return data
          .map<WalletBalanceData>(
              (Map<String, dynamic> e) => WalletBalanceData.fromJson(e))
          .toList() as M;
    }
    if (<WalletClientEntity>[] is M) {
      return data
          .map<WalletClientEntity>(
              (Map<String, dynamic> e) => WalletClientEntity.fromJson(e))
          .toList() as M;
    }
    if (<WalletClientData>[] is M) {
      return data
          .map<WalletClientData>(
              (Map<String, dynamic> e) => WalletClientData.fromJson(e))
          .toList() as M;
    }
    if (<WalletTransactionsEntity>[] is M) {
      return data
          .map<WalletTransactionsEntity>(
              (Map<String, dynamic> e) => WalletTransactionsEntity.fromJson(e))
          .toList() as M;
    }
    if (<WalletTransactionsData>[] is M) {
      return data
          .map<WalletTransactionsData>(
              (Map<String, dynamic> e) => WalletTransactionsData.fromJson(e))
          .toList() as M;
    }
    if (<WalletTransactionsDataTransactions>[] is M) {
      return data
          .map<WalletTransactionsDataTransactions>((Map<String, dynamic> e) =>
              WalletTransactionsDataTransactions.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}
